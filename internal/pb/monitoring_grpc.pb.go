// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: api/monitoring.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Monitoring_LoadAvgGetMon_FullMethodName = "/pb.Monitoring/LoadAvgGetMon"
	Monitoring_CpuGetMon_FullMethodName     = "/pb.Monitoring/CpuGetMon"
	Monitoring_NetstatGetMon_FullMethodName = "/pb.Monitoring/NetstatGetMon"
)

// MonitoringClient is the client API for Monitoring service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonitoringClient interface {
	LoadAvgGetMon(ctx context.Context, in *Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LoadAvgReply], error)
	CpuGetMon(ctx context.Context, in *Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CpuReply], error)
	NetstatGetMon(ctx context.Context, in *Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NetstatReply], error)
}

type monitoringClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitoringClient(cc grpc.ClientConnInterface) MonitoringClient {
	return &monitoringClient{cc}
}

func (c *monitoringClient) LoadAvgGetMon(ctx context.Context, in *Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LoadAvgReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Monitoring_ServiceDesc.Streams[0], Monitoring_LoadAvgGetMon_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Request, LoadAvgReply]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Monitoring_LoadAvgGetMonClient = grpc.ServerStreamingClient[LoadAvgReply]

func (c *monitoringClient) CpuGetMon(ctx context.Context, in *Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CpuReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Monitoring_ServiceDesc.Streams[1], Monitoring_CpuGetMon_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Request, CpuReply]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Monitoring_CpuGetMonClient = grpc.ServerStreamingClient[CpuReply]

func (c *monitoringClient) NetstatGetMon(ctx context.Context, in *Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NetstatReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Monitoring_ServiceDesc.Streams[2], Monitoring_NetstatGetMon_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Request, NetstatReply]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Monitoring_NetstatGetMonClient = grpc.ServerStreamingClient[NetstatReply]

// MonitoringServer is the server API for Monitoring service.
// All implementations must embed UnimplementedMonitoringServer
// for forward compatibility.
type MonitoringServer interface {
	LoadAvgGetMon(*Request, grpc.ServerStreamingServer[LoadAvgReply]) error
	CpuGetMon(*Request, grpc.ServerStreamingServer[CpuReply]) error
	NetstatGetMon(*Request, grpc.ServerStreamingServer[NetstatReply]) error
	mustEmbedUnimplementedMonitoringServer()
}

// UnimplementedMonitoringServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMonitoringServer struct{}

func (UnimplementedMonitoringServer) LoadAvgGetMon(*Request, grpc.ServerStreamingServer[LoadAvgReply]) error {
	return status.Errorf(codes.Unimplemented, "method LoadAvgGetMon not implemented")
}
func (UnimplementedMonitoringServer) CpuGetMon(*Request, grpc.ServerStreamingServer[CpuReply]) error {
	return status.Errorf(codes.Unimplemented, "method CpuGetMon not implemented")
}
func (UnimplementedMonitoringServer) NetstatGetMon(*Request, grpc.ServerStreamingServer[NetstatReply]) error {
	return status.Errorf(codes.Unimplemented, "method NetstatGetMon not implemented")
}
func (UnimplementedMonitoringServer) mustEmbedUnimplementedMonitoringServer() {}
func (UnimplementedMonitoringServer) testEmbeddedByValue()                    {}

// UnsafeMonitoringServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonitoringServer will
// result in compilation errors.
type UnsafeMonitoringServer interface {
	mustEmbedUnimplementedMonitoringServer()
}

func RegisterMonitoringServer(s grpc.ServiceRegistrar, srv MonitoringServer) {
	// If the following call pancis, it indicates UnimplementedMonitoringServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Monitoring_ServiceDesc, srv)
}

func _Monitoring_LoadAvgGetMon_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoringServer).LoadAvgGetMon(m, &grpc.GenericServerStream[Request, LoadAvgReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Monitoring_LoadAvgGetMonServer = grpc.ServerStreamingServer[LoadAvgReply]

func _Monitoring_CpuGetMon_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoringServer).CpuGetMon(m, &grpc.GenericServerStream[Request, CpuReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Monitoring_CpuGetMonServer = grpc.ServerStreamingServer[CpuReply]

func _Monitoring_NetstatGetMon_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoringServer).NetstatGetMon(m, &grpc.GenericServerStream[Request, NetstatReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Monitoring_NetstatGetMonServer = grpc.ServerStreamingServer[NetstatReply]

// Monitoring_ServiceDesc is the grpc.ServiceDesc for Monitoring service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Monitoring_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Monitoring",
	HandlerType: (*MonitoringServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LoadAvgGetMon",
			Handler:       _Monitoring_LoadAvgGetMon_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CpuGetMon",
			Handler:       _Monitoring_CpuGetMon_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "NetstatGetMon",
			Handler:       _Monitoring_NetstatGetMon_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/monitoring.proto",
}
